$ ->

  formatTime = (time) ->
    time = Math.floor(time)
    if time <= 9 then formatted_time = "00:0" + time
    if 9 < time <= 59 then formatted_time = "00:" + time
    if 60 <= time < 540
      if time%60 <= 9 then formatted_time = "0" + Math.floor((time)/60) + ":0" + (time)%60
      if 9 < time%60 <= 59 then formatted_time = "0" + Math.floor((time)/60) + ":" + (time)%60
    if 540 <= time < 3600
      if time%60 <= 9 then formatted_time = Math.floor((time)/60) + ":0" + (time)%60
      if 9 < time%60 <= 59 then formatted_time = Math.floor((time)/60) + ":" + (time)%60
    formatted_time

  shortFormatTime = (time) ->
    time = Math.floor(time)
    if time <= 9 then formatted_time = ":0" + time
    if 9 < time <= 59 then formatted_time = ":" + time
    if 60 <= time < 540
      if time%60 <= 9 then formatted_time = Math.floor((time)/60) + ":0" + (time)%60
      if 9 < time%60 <= 59 then formatted_time = Math.floor((time)/60) + ":" + (time)%60
    if 540 <= time < 3600
      if time%60 <= 9 then formatted_time = Math.floor((time)/60) + ":0" + (time)%60
      if 9 < time%60 <= 59 then formatted_time = Math.floor((time)/60) + ":" + (time)%60
    formatted_time

  youtube_id = $('#data').attr('data-youtube-id')
  window.video_id = parseInt($('#data').attr('data-video-id'))
  window.transcript_id = parseInt($('#data').attr('data-transcript-id'))
  window.interpretation_id = parseInt($('#data').attr('data-interpretation-id'))
  window.number_of_lines = parseInt($('#data').attr('data-number-of-lines-init'))

  tag = document.createElement("script")
  tag.src = "https://www.youtube.com/iframe_api"
  firstScriptTag = document.getElementsByTagName("script")[0]
  firstScriptTag.parentNode.insertBefore tag, firstScriptTag

  jQuery.fn.selectText = ->
    @find("input").each ->
      $("<p class=\"p_copy\" style=\"position: absolute; z-index: -1;\"></p>").insertBefore $(this)  if $(this).prev().length is 0 or not $(this).prev().hasClass("p_copy")
      $(this).prev().html $(this).val()

    doc = document
    element = this[0]
    console.log this, element
    if doc.body.createTextRange
      range = document.body.createTextRange()
      range.moveToElementText element
      range.select()
    else if window.getSelection
      selection = window.getSelection()
      range = document.createRange()
      range.selectNodeContents element
      selection.removeAllRanges()
      selection.addRange range

  window.active_editing_category = 'none'
  window.section = 0 
  window.time = 0
  window.got_volume = false
  window.video_play_counter = 0
  window.line_being_commented = 0
  window.line_being_timed_id = 0
  window.line_being_sliced = 0
  
  if $('.star').attr('id') == 'star-full'
    window.star_id = parseInt($('#star-full').attr('data-star-id'))

  # WE GOTTA HAVE A PLAYBACK SLIDER

  $('#settings').append("
    <div class='playback-left-label end-label'><div class='playback-left-label inner-label'></div></div>
      <div id='playback-slider'></div>
    <div class='playback-right-label end-label'><div class='playback-right-label inner-label'></div></div>
  ")

  playbackControls = (video_duration) ->
    $('.playback-left-label.inner-label').html(":00")
    $('.playback-right-label.inner-label').html("#{shortFormatTime(video_duration)}")
  
    $('#playback-slider').slider(
        min: 0,
        max: video_duration,
        value: window.time,
        step: 1
        stop: (event, ui) ->
          player.seekTo($('#playback-slider').slider("value"))
          window.sliding = false
        slide: (event, ui) ->
          window.sliding = true
          $('#playback-slider').children().html(shortFormatTime(ui.value))
      )

  window.onYouTubeIframeAPIReady = ->
    player = new YT.Player("new-video-box", {
      height: "315"
      width: "420"
      videoId: youtube_id
      playerVars: 
        {
        controls: 0
        cc_load_policy: 1
        wmode: "opaque"
        }
      events:
        onReady: onPlayerReady
        onStateChange: onPlayerStateChange })
    console.log "Checking for cc..." + player.getOptions().indexOf('cc')
    window.player = player

  onPlayerReady = (event) ->
    video_duration = window.player.getDuration()
    window.video_duration = video_duration
    window.half_duration = video_duration * .5
    playbackControls(video_duration)
    if window.loop_length == false
      straightPlaybackBehavior()
    event.target.playVideo()

  countVideoPlayTime = ->

    # IF PLAYER IS PLAYING, UPDATE THE PLAY COUNTER
    state = player.getPlayerState()
    if state == 1
      window.video_play_counter += 1
    if state == 0
      $('#watch-again').addClass('video-finished')
      $('#watch-again').html('<br><br><br><br><br><h3 class="link-style">Watch again?</class></h3>')
      $('iframe').remove()
      if window.video_play_counter + 10 > window.video_duration
        $.post("/update_playcount/#{window.playcount_id}", (data) ->
          new_playcount = data.data.play_count
          $('#video-play-counter').html(new_playcount)
        )
        window.video_play_counter = 0
      $('#watch-again').after('<div id="new-video-box"></div>')
    
    # UI RESPONDS AS VIDEO PLAYS
    exact_time = player.getCurrentTime()
    window.time = Math.floor(exact_time)

    if $("[data-time=#{window.time}]").length != 0
      this_line = $(".transcript-line[data-time=#{window.time}]").eq(0)
      unless this_line.hasClass('highlighted')
        this_line.effect("highlight", { color: "#FFFF00" }, 4000)
        this_line.addClass("highlighted")
        $("#community-notes").scrollTo(this_line.prev().prev(), { duration : 250 } )

    # PLAYBACK SLIDER MOVES HERE
    unless window.sliding == true
      $('#playback-slider').slider("value", window.time)
      $('#playback-slider').children().html(shortFormatTime(window.time))

  counter = setInterval(countVideoPlayTime, 400)
  done = false

  onPlayerStateChange = (event) ->
    if event.data == YT.PlayerState.PAUSED
      exact_time = player.getCurrentTime()
      window.time = Math.round(exact_time)
      window.section = window.time / window.loop_length

  delayedShow = ->
    window.player.playVideo()
  window.setTimeout(delayedShow, 1000)

  $('#watch-again').livequery ->
    $(this).click ->
      onYouTubeIframeAPIReady()
      $('#watch-again').removeClass('video-finished')
      $('#watch-again').html('')


  # # # Embedding 

  $("#dialog-embed").dialog(
    autoOpen: false,
    minWidth: 760,
  )

  $(".open-embed-dialog").click ->
    $("#dialog-embed").dialog("open")
    $("#embed-code").selectText()


  # # # Deleting transcript 

  $(".remove-transcript-dialog").click ->
    $("#dialog-confirm-remove-transcript").dialog("open")
    $("#dialog-confirm-remove-transcript").attr('data-transcript-id', window.transcript_id)

  $("#dialog-confirm-remove-transcript").dialog(
    autoOpen: false,
    buttons:
      Delete: ->
        id = parseInt($(this).attr('data-transcript-id'))
        $.post('/destroy_transcript', { 'id' : "#{id}" }, (data) ->
          transcript = data.data
          $.post('/find_video', { 'id' : "#{transcript.video_id}" }, (data) ->
            video = data.data
            window.location.href = "/videos/#{video.slug}" 
          )
        )
      Cancel: ->
        $(this).dialog("close")
  )

  # # # Save alert

  saveAlert = ->
    $('.save-lines').html('<i class="icon icon-save"></i>  Saved!')
    $('.save-lines').effect("highlight", { color: "#FFFF00" }, 4000)

  $('.save-lines').click ->
    saveAlert()

  # # # Editing transcript

  $("#dialog-editing-tools").dialog(
    autoOpen: false,
    minWidth: 460,
  )

  $('.edit-lines').livequery ->
    $(this).click ->
      $("#dialog-editing-tools").dialog("open")

  # # # Selecting editing mode

  $('.editing-category').livequery ->
    $(this).click ->
      stopReordering()
      $('.editing-category').each(->
        $(this).children('.status').text($(this).attr('data-inactive'))
        $(this).children('.status').removeAttr('style')
        $(this).children('.icon').removeAttr('style')
      )
      $(this).children('.status').text($(this).attr('data-active'))
      $(this).children('.status').attr('style','color: yellow;')
      $(this).children('.icon').attr('style','color: yellow;')
      window.active_editing_category = $(this).attr('id')

      # # # Cursor changes to pointer
      $('body').attr('style','cursor: pointer;')

      # # # Show instructions
      if $(this).attr('id') == 'adding-lines'
        $('#editing-instructions').html("Double click on a line, your new line will come afterward.")
      else if $(this).attr('id') == 'editing-lines' 
        $('#editing-instructions').html("Click on a line to revise its content.")
        
      # # # Change cursor to slicer
      else if $(this).attr('id') == 'slicing-lines'
        $('#editing-instructions').html("
          Click the line you'd like to slice. Then click on the word that should begin the new line.
          <br><br>
          Text style:<br>
          <input class='slicing-style' type='radio' name='western'> Latin alphabet
          <br>
          <input class='slicing-style' type='radio' name='asian'> Chinese characters (漢字)
        ")
      else if $(this).attr('id') == 'removing-lines'
        $('#editing-instructions').html("Remove lines you don't need any more.")
      else if $(this).attr('id') == 'timing-lines' 
        $('#editing-instructions').html("Click a line to time it along with the video.")
      else if $(this).attr('id') == 'commenting-lines'
        $('#editing-instructions').html("Click a line to add a comment.")

      # # # Turn on reordering
      else if $(this).attr('id') == 'reordering-lines'
        $('#untimed-lines').sortable("enable")    
        $('#editing-instructions').html("New feature, coming soon.")
        $('#editing-instructions').html("Drag the lines to reorder them. Please note: only lines that haven't been timed can be reordered.")
      else if $(this).attr('id') == 'copying-lines'
        $('#editing-instructions').html("Double click a line to copy it.")

  # # # Editing line logic

  editLine = (line_id) ->
    this_line = $(".editable-line[data-line-id=#{line_id}]")
    this_line_text = $(".lang1[data-line-id=#{line_id}]")
    text = $.trim(this_line_text.text())
    this_line.replaceWith("
      <input type='text' class='update-line-area' style='width: 320px;' data-line-id=#{line_id}>
      <span class='update-line blue-link' data-line-id=#{line_id}><i class='icon icon-ok'></i><strong></strong></span>
    ")
    $(".update-line-area[data-line-id=#{line_id}]").val(text)

  $('.update-line').livequery ->
    $(this).click ->
      id = parseInt($(this).attr('data-line-id'))
      this_line = $(".update-line-area[data-line-id=#{id}]")
      this_lang1 = this_line.val()
      $(this).remove()
      $.post('/update_line', { 'line' : { 'lang1' : "#{this_lang1}" , 'id' : "#{id}" } }, (data) ->
        line = data.data
        console.log line
        this_line.replaceWith("
          <div class='editable-line transcript-line rounded' data-line-id=#{line.id} data-time=#{line.time}>
            <span class='lang1' data-line-id=#{line.id}>#{line.lang1} </span>
            <span class='line-comment-area' data-line-id=#{line.id}></span>
            <span class='line-timing tiny gray' data-line-id=#{line.id} data-time=#{line.time}>#{formatTime(line.time)}</span>
          </div>
        ")
        saveAlert()
      )

  # # # Removing line logic

  removeLine = (line_id) ->
    $("#dialog-confirm-remove-line").dialog("open")
    $("#dialog-confirm-remove-line").attr("data-line-id", "#{line_id}")

  $("#dialog-confirm-remove-line").dialog(
      autoOpen: false,
      buttons:
        Delete: ->
          id = parseInt($(this).attr('data-line-id'))
          $.post('/destroy_line', { 'id' : "#{id}" }, (data) ->
            line_id = data.data.id
            $(".transcript-line[data-line-id=#{line_id}]").remove()
            $("#dialog-confirm-remove-line").dialog("close")
            saveAlert()
          )
        Cancel: ->
          $(this).dialog("close")
    )

  # # # Slicing line logic 

  sliceLine = (line_id) -> 
    this_line = $(".lang1[data-line-id=#{line_id}]")
    unless this_line.hasClass('slicing')
      unsliceLine($('.slicing'))
      window.line_being_sliced = line_id
      if window.slicing_style == 'western'
        this_line.lettering('words')
      else if window.slicing_style == 'asian'
        this_line.lettering()
      this_line.parent().addClass('slicing')

  unsliceLine = (line) ->
    lang1 = line.children('.lang1')
    lang1.html(lang1.text())
    line.removeClass('slicing')

  $('.slicing-style').livequery ->
    $(this).click -> 
      $('.slicing-style').each(->
        $(this).prop('checked', false)
      )
      $(this).prop('checked', true)
      window.slicing_style = $(this).attr('name')

  $("[class^='word']").livequery ->
    $(this).click ->

      id = parseInt($(this).parent().attr('data-line-id'))

      after_words = []      
      for word in $(this).nextAll("[class^='word']")
        after_words.push $(word).text()
      after_sentence = $(this).text()
      for word in after_words
        after_sentence += (' ' + word) 
        console.log "after_sentence = #{after_sentence}"

      $(this).parent().parent().after("
        <div class='transcript-line editable-line rounded'>
          <span class='lang1'>#{after_sentence}</span>
          <span class='line-comment-area'></span>
          <span class='line-timing tiny gray'></span>
        </div>
      ")

      before_words = []
      for word in $(this).prevAll("[class^='word']")
        before_words.push $(word).text()
      before_sentence = ''
      for word in before_words.reverse()
        before_sentence += (' ' + word)

      $(this).parent().text(before_sentence)

  $("[class^='char']").livequery ->
    $(this).click ->

      this_lang1 = $(this).parent()
      this_line = this_lang1.parent()
      id = parseInt(this_lang1.attr('data-line-id'))

      after_words = []      
      for word in $(this).nextAll("[class^='char']")
        after_words.push $(word).text()
      after_sentence = $(this).text()
      for word in after_words
        after_sentence += word

      if $(this).parent().parent().hasClass('has-time')
        time = parseInt($(this).parent().parent().attr('data-time'))
      else
        time = ''

      $.post('/new_line', { 'line' : { 'lang1' : "#{after_sentence}", 'video_id' : "#{window.video_id}", 'interpretation_id' : "#{window.interpretation_id}", 'transcript_id' : "#{window.transcript_id}", 'time' : "#{time}" } }, (data) ->
        line = data.data
        id = line.id
        time = line.time
        this_line.after("
          <div class='transcript-line editable-line rounded' data-line-id=#{id} data-time=#{time}>
            <span class='lang1' data-line-id=#{id}>#{after_sentence}</span>
            <span class='line-comment-area' data-line-id=#{id}></span>
            <span class='line-timing tiny gray' data-line-id=#{id} data-time=#{time}>#{formatTime(time)}</span>
          </div>
        ")
        reorder()
      )

      before_words = []
      for word in $(this).prevAll("[class^='char']")
        before_words.push $(word).text()
      before_sentence = ''
      for word in before_words.reverse()
        before_sentence += word

      $.post('/update_line', { 'line' : { 'id' : "#{id}", 'lang1' : "#{before_sentence}" } }, (data) ->
        line = data.data
        this_lang1.text(line.lang1)
      )

  # # # Copy logic

  copyLine = (line_id) -> 
    this_line = $(".editable-line[data-line-id=#{line_id}]")
    this_lang1 = $(".lang1[data-line-id=#{line_id}]").text()
    if this_lang1 isnt ''
      $.post('/new_line', { 'line' : { 'transcript_id' : "#{window.transcript_id}", 'interpretation_id' : "#{window.interpretation_id}", 'lang1' : "#{this_lang1}", 'video_id' : "#{window.video_id}" } }, (data) ->
        line = data.data
        this_line.after("
          <div class='editable-line transcript-line rounded' data-line-id=#{line.id}>
          <span class='lang1' data-line-id=#{line.id}>
            #{line.lang1}
          </span>
          <span class='line-comment-area' data-line-id=#{line.id}></span>
          <span class='line-timing tiny gray' data-line-id=#{line.id}>
            ???
          </span>
          </div>
        ")
        saveAlert()
      )


  # # # Commenting logic

  commentLine = (line_id) ->
    unless window.line_being_commented == line_id
      window.line_being_commented = line_id
      comment_area = $(".line-comment-area[data-line-id=#{line_id}]")
      comment_area.html("<span class='line-comment-area' data-line-id=#{line_id}><br><i>Your explanation/comment</i>: &nbsp; <input type='text' class='comment' data-line-id=#{line_id}>&nbsp;<i class='icon-ok blue-link submit-line-comment' data-line-id=#{line_id}></i><i class='icon-remove blue-link remove-line-comment-area' data-line-id=#{line_id}></i></span>")

  $('.remove-line-comment-area').livequery ->
    $(this).click ->
      id = parseInt($(this).attr('data-line-id'))
      comment_area = $(".line-comment-area[data-line-id=#{id}]")
      comment_area.html('')

  $('.submit-line-comment').livequery ->
    $(this).click ->
      id = parseInt($(this).attr('data-line-id'))
      comment_text = $(".comment[data-line-id=#{id}]").val()
      if comment_text isnt ''
        $.post('/new_comment', { 'comment' : { 'line_id' : "#{id}", 'comment_text' : "#{comment_text}", 'user_id' : "#{window.user_id}" } }, (data) ->
          $(".transcript-line[data-line-id=#{id}]").append("
            <div class='line-comment rounded' data-line-id=#{data.data.line_id} data-comment-id=#{data.data.id}>
              <span class='comment-text' data-comment-id=#{data.data.id}>#{data.data.comment_text}</span>
              <span class='edit-comment' data-comment-id=#{data.data.id}><i class='icon icon-pencil blue-link'></i></span>
              <span class='remove-comment' data-comment-id=#{data.data.id}><i class='icon icon-remove blue-link'></i></span>
            </div>
          ")
          $(".line-comment-area[data-line-id=#{id}]").remove()
        )

  # # # More commenting logic! 

  $('.edit-comment').livequery ->
    $(this).click ->
      id = parseInt($(this).attr('data-comment-id'))
      $(".remove-comment[data-comment-id=#{id}]").hide()
      $(this).hide()
      comment = $(".comment-text[data-comment-id=#{id}]")
      comment.hide()
      val = comment.text()
      comment.after("
        <input type='text' class='edit-comment-box' data-comment-id=#{id}>
        <i class='icon icon-ok blue-link submit-edited-comment' data-comment-id=#{id}></i>
        <i class='icon icon-remove blue-link back-from-editing-comment' data-comment-id=#{id}></i>
      ")
      $(".edit-comment-box[data-comment-id=#{id}]").val(val)

  backFromEditingComment = (id) ->
    $(".comment-text[data-comment-id=#{id}]").show()
    $(".submit-edited-comment[data-comment-id=#{id}]").remove()
    $(".back-from-editing-comment[data-comment-id=#{id}]").remove()
    $(".edit-comment-box[data-comment-id=#{id}]").remove()
    $(".remove-comment[data-comment-id=#{id}]").show()
    $(".edit-comment[data-comment-id=#{id}]").show()

  $('.back-from-editing-comment').livequery ->
    $(this).click ->
      id = parseInt($(this).attr('data-comment-id'))
      backFromEditingComment(id)

  $('.submit-edited-comment').livequery ->
    $(this).click -> 
      id = parseInt($(this).attr('data-comment-id'))
      new_comment_text = $(".edit-comment-box[data-comment-id=#{id}]").val()
      $.post('/update_comment', { 'comment' : { 'id' : "#{id}", 'comment_text' : "#{new_comment_text}" } }, (data) ->
        comment = data.data
        comment_text = $(".comment-text[data-comment-id=#{comment.id}]")
        comment_text.text(comment.comment_text)
        backFromEditingComment(id)
        saveAlert()
      )

  $('.remove-comment').livequery ->
    $(this).click ->
      id = parseInt($(this).attr('data-comment-id'))
      $("#dialog-confirm-remove-comment").dialog("open")
      $("#dialog-confirm-remove-comment").attr("data-comment-id", "#{id}")

  $("#dialog-confirm-remove-comment").dialog(
      autoOpen: false,
      buttons:
        Delete: ->
          id = parseInt($(this).attr('data-comment-id'))
          $.post('/destroy_comment', { 'id' : "#{id}" }, (data) ->
            comment_id = data.data.id
            $(".line-comment[data-comment-id=#{comment_id}]").remove()
            $("#dialog-confirm-remove-comment").dialog("close")
          )
          saveAlert()
        Cancel: ->
          $(this).dialog("close")
    )

  # # # Reorder lines logic 

  reorder = ->
    for line in $('#untimed-lines').children(".editable-line")
      position = $(line).prevAll().length + 1
      $(line).attr('data-line-order', "#{position}")
      id = parseInt($(line).attr('data-line-id'))
      $.post('/update_line', { 'line' : { 'id' : "#{id}", 'ordering' : "#{position}" } }, (data) ->
        console.log data
      )

  $('#untimed-lines').sortable(
    stop: (event, ui) ->
      reorder()
  )

  $('#untimed-lines').sortable("disable")    

  stopReordering = ->
    unless $('#untimed-lines').sortable("option", "disabled")
      $('#untimed-lines').sortable("disable")


  # # # Adding line logic

  addLineAfter = (line_id) -> 
    $(".editable-line[data-line-id=#{line_id}]").after("
      <div id='adding-new-line-area'>
        New line: &nbsp; <input id='new-line-input' type='text'>
        <i class='icon-ok blue-link submit-new-line' data-line-id=#{line_id}></i>
        <i class='icon-remove blue-link back-from-adding-new-line'></i>
      </div>
    ")

  $('.back-from-adding-new-line').livequery ->
    $(this).click ->
      $(this).parent().remove()

  $('.submit-new-line').livequery ->
    $(this).click ->
      this_line_input = $(this).parent()
      line_id = parseInt($(this).attr('data-line-id'))
      lang1 = $('#new-line-input').val()
      if lang1 isnt ''
        $.post('/new_line', { 'line' : { 'transcript_id' : "#{window.transcript_id}", 'interpretation_id' : "#{window.interpretation_id}", 'lang1' : "#{lang1}", 'video_id' : "#{window.video_id}" } }, (data) ->
          line = data.data
          $(".editable-line[data-line-id=#{line_id}]").after("
            <div class='editable-line transcript-line rounded' data-line-id=#{line.id}>
              <span class='lang1' data-line-id=#{line.id}>#{line.lang1}</span>
              <span class='line-comment-area' data-line-id=#{line.id}></span>
              <span class='line-timing tiny gray' data-line-id=#{line.id}></span>
            </div>
          ")
          this_line_input.remove()
          saveAlert()
        )

  # # # Adding timing logic

  timeLine = (line_id) ->
    window.line_being_timed_id = line_id
    $('.ui-slider-handle').addClass('time-selector')
    $('.ui-slider-handle').addClass('time-selector-handle')
    $(".line-timing[data-line-id=#{line_id}]").hide()
    $('#timing-instructions').remove()
    $(".editable-line[data-line-id=#{line_id}]").after("
      <p id='timing-instructions' class='tiny rounded' style='margin-top: 8px;'>
        <span>
          <i class='icon icon-time icon-2x orange-icon time-selector'></i>
          Double click the orange clock when the line begins...
        </span>
        <br>
        <span class='back-from-adding-timing-to-lines'>
          Or go back:
          <i class='icon icon-remove icon-2x orange-icon'></i>
        </span>
      </p>")

  $('.back-from-adding-timing-to-lines').livequery ->
    $(this).click ->
      console.log 'back'
      $('.time-selector').removeClass('time-selector')
      $('.time-selector-handle').removeClass('time-selector-handle')
      $('#timing-instructions').remove()
      window.line_being_timed_id = 0
      
  $('.time-selector').livequery ->
    $(this).dblclick ->
      time = window.time
      $.post('/update_line', { 'line' : { 'id' : "#{window.line_being_timed_id}", 'time' : "#{time}" } }, (data) ->
        line = data.data
        this_line = $(".transcript-line[data-line-id=#{line.id}]")
        $(".line-timing[data-line-id=#{line.id}]").html(formatTime(line.time)).show()

        if this_line.parent().attr('id') == 'untimed-lines'

          if $('#timed-lines').length == 0
            $('#transcript-lines').prepend("
              <div id='timed-lines'><p><strong>Timed lines</strong></p></div><br>
            ")
          
          this_line.appendTo($('#timed-lines'))

          ###   
          else
            timed_lines = $('#timed-lines').children(".transcript-line")
            time_array = []
            for line in timed_lines
              time_array.push parseInt($(line).attr('data-time'))
            for this_time in time_array
              if this_time > time
                this_time_index = time_array.indexOf(this_time)
                time_array = time_array.splice(this_time_index, 1)
            prev_time = time_array.max
            console.log "prev_time = #{prev_time}"
            prev_line = $("#timed-lines").children(".transcript-line[data-time=#{prev_time}]")
            this_line.after(prev_line)
          ###

          $('.time-selector').removeClass('time-selector')
          $('.time-selector-handle').removeClass('time-selector-handle')
          $('#timing-instructions').remove()
          window.line_being_timed_id = 0
          $(".line-timing[data-line-id=#{line.id}]").html(formatTime(line.time))
          saveAlert()
      )


  # # # Assigns each editing category to its proper function

  $('.editable-line').livequery ->
    $(this).click -> 
      line_id = parseInt($(this).attr('data-line-id'))
      console.log line_id
      if window.active_editing_category == 'editing-lines'
        editLine(line_id)
      else if window.active_editing_category == 'removing-lines'
        removeLine(line_id)
      else if window.active_editing_category == 'timing-lines'
        timeLine(line_id)
      else if window.active_editing_category == 'commenting-lines'
        commentLine(line_id)
      else if window.active_editing_category == 'slicing-lines'
        sliceLine(line_id)
      else if window.active_editing_category == 'adding-lines'
        addLineAfter(line_id)
      else if typeof $(this).attr('data-time') != 'undefined' and $(this).attr('data-time') != false
        console.log $(this).attr('data-time')
        window.player.seekTo($(this).attr('data-time'))

    $(this).dblclick ->
      line_id = parseInt($(this).attr('data-line-id'))
      console.log line_id
      if window.active_editing_category == 'copying-lines'
        copyLine(line_id)

  $('.line-timing').livequery ->
    $(this).click ->  
      window.player.seekTo($(this).attr('data-time'))


  # # # Translating stuff 

  $('.translate-lines').livequery ->
    $(this).click ->
      $("#dialog-translation-language").dialog("open")

  $("#dialog-translation-language").dialog(
    autoOpen: false,
    buttons:
      Go: ->
        language = $('#language-select').val()
        if language isnt '' 
          $("#dialog-translation-language").dialog("close")
          $.post('/find_language', { 'language' : "#{language}" }, (data) ->
            window.language_id = data.data.id
            $.post('/new_translation', { 'translation' : { 'transcript_id' : "#{window.transcript_id}", 'video_id' : "#{window.video_id}", 'user_id' : "#{window.user_id}", 'language_id' : "#{window.language_id}" } }, (data) ->
              window.translation_id = data.data.id
              for line in $('.editable-line')
                line = $(line)
                id = line.attr('data-line-id')
                time = line.attr('data-time')
                lang1 = $.trim(line.text())
                line.addClass('line-container')
                line.children('.lang1').eq(0).addClass('line-left-subcontainer')
                line.append("
                  <div class='translate-line-input-area line-right-subcontainer' data-line-id=#{id}>
                    <textarea style='width: 120px; float: left; height: 60px;' data-line-id=#{id}></textarea>
                    <div class='submit-translation blue-link' data-line-id=#{id}>
                      <i class='icon icon-ok'></i>
                    </div>
                  </div>
                ")
              )
            )
      Back: ->
        $(this).dialog("close")
    )

  # .line-container { float: left; width: 400px; padding: 4px;  }
  # .line-left-subcontainer { width: 165px; margin-bottom: 4px; margin-top: 4px; float: left; }
  # .line-right-subcontainer { width: 165px; margin-bottom: 4px; margin-top: 4px; margin-right: 4px; float: right; }

  $('.submit-translation').livequery ->
    $(this).click ->
      id = $(this).attr('data-line-id')
      lang2 = $("textarea[data-line-id=#{id}]").val()
      unless lang2 == ''
        $.post('/new_translated_line', { 'translated_line' : { 'line_id' : "#{id}", 'lang2' : "#{lang2}", 'translation_id' : "#{window.translation_id}" } }, (data) ->
          $(".translate-line-input-area[data-line-id=#{data.data.line_id}]").html("#{data.data.lang2}")
        )

  $('#star-empty').livequery ->
    $(this).click ->
      if window.user_id isnt null
        $.post('/add_star', { 'star' : { 'user_id' : "#{window.user_id}", 'transcript_id' : "#{window.transcript_id}" } }, (data) ->
          window.star_id = data.data.id
          $('#star-empty').replaceWith("<i class='icon icon-star star' id='star-full'> </i>")
          $('#star-count').html(1 + parseInt($('#star-count').html()))
        )
      else
        $('#star-notice-area').html('Please sign in to add star.')

  $('#star-full').livequery ->
    $(this).click ->
      if window.user_id isnt null
        $.post('/remove_star', { 'star_id' : "#{window.star_id}" }, (data) ->
          $('#star-full').replaceWith("<i class='icon icon-star-empty star' id='star-empty'> </i>")
          $('#star-count').html(-1 + parseInt($('#star-count').html()))
        )
      else
        $('#star-notice-area').html('Please sign in to add star.')

  $('.back-to-video').click ->
    $.post('/find_video', { 'id' : "#{window.video_id}" }, (data) ->
      window.location.href = "/videos/#{data.data.slug}"
    )

  $('#language-select').livequery ->
    $(this).autocomplete(
      source: (request, response) ->
        $.ajax(
          url: "/language_list?term=#{request.term}",
          type: "POST", 
          dataType: "json",
          success: (data) ->
            console.log data
            response($.map(data.data, (item) ->
              label: item.name,
              value: item.name
            ))
        )
      )
      
###
this_line = $(ui.item)
line_before = this_line.prev()
line_after = this_line.next()

if line_before.length == 0 and line_after.length > 0
this_line.attr('data-ordering', "1")
console.log 'first!!!'

if line_before.length > 0 and line_after.length == 0
number_of_lines = $('#untimed-lines').children().length
console.log 'last!!!'
# # # Guessing the time
if line_before.length > 0 and line_after.length > 0
time_before = parseInt(line_before.attr('data-time'))
time_after = parseInt(line_after.attr('data-time'))
new_time = Math.floor((time_before + time_after)/2)
else if line_before.length > 0 and line_after.length == 0
time_before = parseInt(line_before.attr('data-time'))
new_time = time_before + 4
else if line_before.length == 0 and line_after.length > 0
time_after = parseInt(line_after.attr('data-time'))
if time_after > 3
  new_time = time_after - 4
else
  new_time = 0
console.log new_time
new_time_formatted = formatTime(new_time)
$(ui.item).attr('data-time', new_time)
$(ui.item).children('.line-timing').html(new_time_formatted)
$(ui.item).children('.line-timing').addClass('questionable')
###
